//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bot_guild_welcomes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub enabled: i8,
    #[sea_orm(column_name = "channelID")]
    pub channel_id: Option<String>,
    #[sea_orm(column_name = "botId")]
    pub bot_id: Option<i32>,
    #[sea_orm(column_name = "guildId")]
    pub guild_id: Option<i32>,
    #[sea_orm(column_name = "messageId", unique)]
    pub message_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bots::Entity",
        from = "Column::BotId",
        to = "super::bots::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Bots,
    #[sea_orm(
        belongs_to = "super::guild_info::Entity",
        from = "Column::GuildId",
        to = "super::guild_info::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    GuildInfo,
    #[sea_orm(
        belongs_to = "super::messages::Entity",
        from = "Column::MessageId",
        to = "super::messages::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Messages,
}

impl Related<super::bots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bots.def()
    }
}

impl Related<super::guild_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildInfo.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
