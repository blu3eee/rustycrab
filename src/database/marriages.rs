//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "marriages")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "partner1Id")]
    pub partner1_id: Option<i32>,
    #[sea_orm(column_name = "partner2Id")]
    pub partner2_id: Option<i32>,
    #[sea_orm(column_name = "ringId")]
    pub ring_id: Option<i32>,
    pub image: Option<String>,
    pub thumbnail: Option<String>,
    pub caption: Option<String>,
    pub quote: Option<String>,
    #[sea_orm(column_name = "dateOfMarriage")]
    pub date_of_marriage: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bot_users::Entity",
        from = "Column::Partner1Id",
        to = "super::bot_users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BotUsers2,
    #[sea_orm(
        belongs_to = "super::bot_users::Entity",
        from = "Column::Partner2Id",
        to = "super::bot_users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BotUsers1,
    #[sea_orm(
        belongs_to = "super::items::Entity",
        from = "Column::RingId",
        to = "super::items::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Items,
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
