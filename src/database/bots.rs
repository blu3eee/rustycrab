//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bots")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "botID", unique)]
    pub bot_id: String,
    pub token: String,
    #[sea_orm(column_name = "themeHexColor")]
    pub theme_hex_color: String,
    pub discord_secret: String,
    pub discord_callback_url: String,
    #[sea_orm(column_name = "premiumFlags")]
    pub premium_flags: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auto_responses::Entity")]
    AutoResponses,
    #[sea_orm(has_many = "super::auto_roles::Entity")]
    AutoRoles,
    #[sea_orm(has_many = "super::bot_guild_configurations::Entity")]
    BotGuildConfigurations,
    #[sea_orm(has_many = "super::bot_guild_welcomes::Entity")]
    BotGuildWelcomes,
    #[sea_orm(has_many = "super::bot_users::Entity")]
    BotUsers,
    #[sea_orm(has_many = "super::guild_action_logs::Entity")]
    GuildActionLogs,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
    #[sea_orm(has_many = "super::log_settings::Entity")]
    LogSettings,
    #[sea_orm(has_many = "super::ticket_multi_panels::Entity")]
    TicketMultiPanels,
    #[sea_orm(has_many = "super::ticket_panels::Entity")]
    TicketPanels,
    #[sea_orm(has_many = "super::ticket_settings::Entity")]
    TicketSettings,
    #[sea_orm(has_many = "super::ticket_support_teams::Entity")]
    TicketSupportTeams,
    #[sea_orm(has_many = "super::tickets::Entity")]
    Tickets,
}

impl Related<super::auto_responses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AutoResponses.def()
    }
}

impl Related<super::auto_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AutoRoles.def()
    }
}

impl Related<super::bot_guild_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildConfigurations.def()
    }
}

impl Related<super::bot_guild_welcomes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildWelcomes.def()
    }
}

impl Related<super::bot_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotUsers.def()
    }
}

impl Related<super::guild_action_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildActionLogs.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::log_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LogSettings.def()
    }
}

impl Related<super::ticket_multi_panels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketMultiPanels.def()
    }
}

impl Related<super::ticket_panels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketPanels.def()
    }
}

impl Related<super::ticket_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketSettings.def()
    }
}

impl Related<super::ticket_support_teams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketSupportTeams.def()
    }
}

impl Related<super::tickets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tickets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
