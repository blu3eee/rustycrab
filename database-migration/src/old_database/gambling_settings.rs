//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "gambling_settings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "gameType")]
    pub game_type: String,
    #[sea_orm(column_name = "adminIDs", column_type = "Text", nullable)]
    pub admin_i_ds: Option<String>,
    #[sea_orm(column_name = "allowedChannelIDs", column_type = "Text", nullable)]
    pub allowed_channel_i_ds: Option<String>,
    #[sea_orm(column_name = "maxPlayers")]
    pub max_players: i32,
    #[sea_orm(column_name = "maxBet")]
    pub max_bet: i32,
    #[sea_orm(column_name = "botBotID")]
    pub bot_bot_id: Option<String>,
    #[sea_orm(column_name = "guildGuildID")]
    pub guild_guild_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bots_info::Entity",
        from = "Column::BotBotId",
        to = "super::bots_info::Column::BotId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BotsInfo,
    #[sea_orm(
        belongs_to = "super::guild_info::Entity",
        from = "Column::GuildGuildId",
        to = "super::guild_info::Column::GuildId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    GuildInfo,
}

impl Related<super::bots_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotsInfo.def()
    }
}

impl Related<super::guild_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
