//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bots_info")]
pub struct Model {
    #[sea_orm(column_name = "botID", primary_key, auto_increment = false, unique)]
    pub bot_id: String,
    pub token: String,
    #[sea_orm(column_name = "themeHexColor")]
    pub theme_hex_color: String,
    pub discord_secret: String,
    pub discord_callback_url: String,
    #[sea_orm(column_name = "emojiCurrency")]
    pub emoji_currency: Option<String>,
    #[sea_orm(column_name = "emojiCheckMark")]
    pub emoji_check_mark: Option<String>,
    #[sea_orm(column_name = "emojiCrossMark")]
    pub emoji_cross_mark: Option<String>,
    #[sea_orm(column_name = "emojiBlank")]
    pub emoji_blank: Option<String>,
    #[sea_orm(column_name = "disabledModules", column_type = "Text", nullable)]
    pub disabled_modules: Option<String>,
    #[sea_orm(column_name = "botOwners", column_type = "Text", nullable)]
    pub bot_owners: Option<String>,
    #[sea_orm(column_name = "botAdmins", column_type = "Text", nullable)]
    pub bot_admins: Option<String>,
    #[sea_orm(column_name = "blackListed", column_type = "Text", nullable)]
    pub black_listed: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub activities: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bookingbot_settings::Entity")]
    BookingbotSettings,
    #[sea_orm(has_many = "super::bot_guild_configurations::Entity")]
    BotGuildConfigurations,
    #[sea_orm(has_many = "super::bot_guild_logs::Entity")]
    BotGuildLogs,
    #[sea_orm(has_many = "super::bot_guild_welcomes::Entity")]
    BotGuildWelcomes,
    #[sea_orm(has_many = "super::bot_user_info::Entity")]
    BotUserInfo,
    #[sea_orm(has_many = "super::gambling_settings::Entity")]
    GamblingSettings,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
    #[sea_orm(has_many = "super::twitch_follows::Entity")]
    TwitchFollows,
}

impl Related<super::bookingbot_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingbotSettings.def()
    }
}

impl Related<super::bot_guild_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildConfigurations.def()
    }
}

impl Related<super::bot_guild_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildLogs.def()
    }
}

impl Related<super::bot_guild_welcomes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildWelcomes.def()
    }
}

impl Related<super::bot_user_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotUserInfo.def()
    }
}

impl Related<super::gambling_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamblingSettings.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::twitch_follows::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TwitchFollows.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
