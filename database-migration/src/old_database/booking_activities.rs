//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "booking_activities")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub timestamp: i32,
    pub r#type: String,
    #[sea_orm(column_name = "adminID")]
    pub admin_id: String,
    pub payment: String,
    #[sea_orm(column_name = "serverExtraProfit")]
    pub server_extra_profit: i32,
    #[sea_orm(column_name = "botUserId")]
    pub bot_user_id: Option<i32>,
    #[sea_orm(column_name = "bookingPlayerId")]
    pub booking_player_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub details: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::booking_player::Entity",
        from = "Column::BookingPlayerId",
        to = "super::booking_player::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BookingPlayer,
    #[sea_orm(
        belongs_to = "super::bot_user_info::Entity",
        from = "Column::BotUserId",
        to = "super::bot_user_info::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BotUserInfo,
}

impl Related<super::booking_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingPlayer.def()
    }
}

impl Related<super::bot_user_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotUserInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
