//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "booking_player")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "playerID")]
    pub player_id: Option<i32>,
    #[sea_orm(column_name = "currentBookingUsed")]
    pub current_booking_used: i32,
    #[sea_orm(column_name = "botUserId", unique)]
    pub bot_user_id: Option<i32>,
    #[sea_orm(column_name = "currentNote")]
    pub current_note: i32,
    #[sea_orm(column_name = "bookingUseds", column_type = "Text", nullable)]
    pub booking_useds: Option<String>,
    #[sea_orm(column_name = "notesLuong", column_type = "Text", nullable)]
    pub notes_luong: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::booking_activities::Entity")]
    BookingActivities,
    #[sea_orm(
        belongs_to = "super::bot_user_info::Entity",
        from = "Column::BotUserId",
        to = "super::bot_user_info::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BotUserInfo,
}

impl Related<super::booking_activities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingActivities.def()
    }
}

impl Related<super::bot_user_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotUserInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
