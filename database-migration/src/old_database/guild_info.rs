//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guild_info")]
pub struct Model {
    #[sea_orm(column_name = "guildID", primary_key, auto_increment = false, unique)]
    pub guild_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bookingbot_settings::Entity")]
    BookingbotSettings,
    #[sea_orm(has_many = "super::bot_guild_configurations::Entity")]
    BotGuildConfigurations,
    #[sea_orm(has_many = "super::bot_guild_logs::Entity")]
    BotGuildLogs,
    #[sea_orm(has_many = "super::bot_guild_welcomes::Entity")]
    BotGuildWelcomes,
    #[sea_orm(has_many = "super::gambling_settings::Entity")]
    GamblingSettings,
}

impl Related<super::bookingbot_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookingbotSettings.def()
    }
}

impl Related<super::bot_guild_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildConfigurations.def()
    }
}

impl Related<super::bot_guild_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildLogs.def()
    }
}

impl Related<super::bot_guild_welcomes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BotGuildWelcomes.def()
    }
}

impl Related<super::gambling_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamblingSettings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
